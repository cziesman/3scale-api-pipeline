#!groovy

//def baseSystemName = "widget"
//def accessToken = "23aff03d2f1f92a1e167c7012b752fbe7163242b9e6dee712dbf7b784d89beba"
//def targetSystemName = "widget-api"
//def targetInstance = "https://${accessToken}@3scale-admin.6dsvl.apps.shared-na46.openshift.opentlc.com"
//def privateBaseURL = "http://three-scale-api-3scale-api.apps.shared-na46.openshift.opentlc.com"
//def privateBasePath = "/api"
//def developerAccountId = "john"
//def publicStagingBaseURL = "3scale-apicast-staging.6dsvl.apps.shared-na46.openshift.opentlc.com"
//def publicProductionBaseURL = "3scale-apicast-production.6dsvl.apps.shared-na46.openshift.opentlc.com"
//def disableTlsValidation = true
//def secretName = "3scale-toolbox"
//def namespace = "jenkins"
//def imageName = "quay.io/redhat/3scale-toolbox"


String jobId() {

    strLength = 5
    source = "abcdefghijklmnopqrstuvwxyz0123456789";
    random = new Random();

    builder = new StringBuilder(strLength);
    for (int i = 0; i < strLength; i++) {
        builder.append(source[random.nextInt(source.length() - 1)]);
    }

    return "job-${env.APP_BASE_NAME}-" + builder.toString().toLowerCase();
}

String waitForPod(String prefix) {

    podName = ""
    startsWith: while (!podName.startsWith(prefix)) {
        sleep 1
        pods = openshift.raw("get pods -o custom-columns=POD:.metadata.name --no-headers").out
        for (String item : pods.split("\n")) {
            if (item.startsWith(prefix)) {
                podName = item;
                break startsWith;
            }
        }
    }

    return podName
}

void waitForSuccessfulCompletion(String pod) {

    phase = ""
    while (!"Succeeded".equals(phase)) {
        sleep 1
        phase = openshift.raw("get pod ${pod} -o custom-columns=POD:.status.phase --no-headers").out.trim()
        echo "phase = " + phase
    }
}

String newJob(String commandLine) {

    jobId = jobId()

    openshift.raw("create job ${jobId} --image=quay.io/redhat/3scale-toolbox -- ${commandLine}")

    return jobId
}

pipeline {

    agent {
        label "master"
    }

    environment {
        // 3scale
        THREESCALE_SERVER = "https://${env.ACCESS_TOKEN}@${env.THREESCALE_SERVER_BASE_URL}"

        // application
        APP_API_NAME = "${APP_BASE_NAME}-api"
        APP_BACKEND_NAME = "${APP_BASE_NAME}-backend"

        APP_OPEN_API_URL = "http://widget-app-widget.apps.shared-na46.openshift.opentlc.com/api-docs.yaml"

    }
    stages {

//        stage('Get list of services') {
//            steps {
//                script {
//
//                    openshift.withCluster() {
//                        openshift.withProject("${env.CICD_NAMESPACE}") {
//                            commandLine = "3scale service list --insecure --output=json ${env.THREESCALE_SERVER}"
//                            jobId = newJob(commandLine)
//
//                            timeout(time: 20, unit: 'SECONDS') {
//                                node {
//                                    pod = waitForPod(jobId)
//
//                                    waitForSuccessfulCompletion(pod)
//
//                                    jobOutput = openshift.raw("logs ${pod}").out
//                                    echo "jobOutput = " + groovy.json.JsonOutput.prettyPrint(jobOutput)
//                                }
//                            }
//
//                            openshift.raw("delete job ${jobId}")
//                        }
//                    }
//                }
//            }
//        }

        stage("Import OpenAPI spec") {
            steps {
                script {

                    openshift.withCluster() {
                        openshift.withProject("${env.CICD_NAMESPACE}") {
                            commandLine = "3scale import openapi --insecure --target_system_name=${env.APP_BACKEND_NAME} --destination=${env.THREESCALE_SERVER} --backend ${env.APP_OPEN_API_URL}"
                            jobId = newJob(commandLine)

                            timeout(time: 20, unit: 'SECONDS') {
                                node {
                                    pod = waitForPod(jobId)

                                    waitForSuccessfulCompletion(pod)

                                    jobOutput = openshift.raw("logs ${pod}").out
                                    echo "jobOutput = " + groovy.json.JsonOutput.prettyPrint(jobOutput)
                                }
                            }

//                            openshift.raw("delete job ${jobId}")
                        }
                    }
                }
            }
        }
    }
}
