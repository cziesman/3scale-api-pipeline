#!groovy

//def publicStagingBaseURL = "3scale-apicast-staging.6dsvl.apps.shared-na46.openshift.opentlc.com"
//def publicProductionBaseURL = "3scale-apicast-production.6dsvl.apps.shared-na46.openshift.opentlc.com"

List APPLICATIONS
List APPLICATION_PLANS

imageName = "quay.io/redhat/3scale-toolbox"

String systemName(String name) {

    String PUNCTUATION = "\\p{Punct}+";
    String WHITESPACE = "\\s+";

    return name
            .replaceAll(PUNCTUATION, "")
            .replaceAll(WHITESPACE, "-")
            .toLowerCase()
}

String jobId() {

    strLength = 5
    source = "abcdefghijklmnopqrstuvwxyz0123456789";
    random = new Random();

    builder = new StringBuilder(strLength);
    for (int i = 0; i < strLength; i++) {
        builder.append(source[random.nextInt(source.length() - 1)]);
    }

    return "job-${env.APP_BASE_NAME}-" + builder.toString().toLowerCase();
}

String waitForPod(String prefix) {

    podName = ""
    startsWith:
    while (!podName.startsWith(prefix)) {
        sleep 1
        pods = openshift.raw("get pods -o custom-columns=POD:.metadata.name --no-headers").out
        for (String item : pods.split("\n")) {
            if (item.startsWith(prefix)) {
                podName = item;
                break startsWith;
            }
        }
    }

    return podName
}

void waitForSuccessfulCompletion(String pod) {

    phase = ""
    while (!"Succeeded".equals(phase)) {
        sleep 1
        phase = openshift.raw("get pod ${pod} -o custom-columns=POD:.status.phase --no-headers").out.trim()
        echo "phase = " + phase
    }
}

String newJob(String commandLine) {

    jobId = jobId()

    openshift.raw("create job ${jobId} --image=${imageName} -- ${commandLine}")

    return jobId
}

pipeline {

    agent {
        label "master"
    }

    stages {

        stage("Initialize environment") {
            steps {
                script {

                    openshift.withCluster() {
                        openshift.withProject("${env.CICD_NAMESPACE}") {

                            json = openshift.raw("get configmap ${env.CONFIG_MAP} -o json").out
                            configMap = readJSON(text: json)

                            // globals
                            env.ACCESS_TOKEN = configMap.data.ACCESS_TOKEN
                            env.APP_BASE_NAME = configMap.data.APP_BASE_NAME
                            env.APP_OPEN_API_URL = configMap.data.APP_OPEN_API_URL
                            env.APP_SERVICE_NAME = configMap.data.APP_SERVICE_NAME
                            env.THREESCALE_SERVER_BASE_URL = configMap.data.THREESCALE_SERVER_BASE_URL

                            // applications
                            application_yaml = configMap.data.application_yaml
                            applications = readYaml(text: application_yaml)
                            APPLICATIONS = applications.applications

                            // application plans
                            applicationPlan_yaml = configMap.data.applicationPlan_yaml
                            applicationPlans = readYaml(text: applicationPlan_yaml)
                            APPLICATION_PLANS = applicationPlans.plans

                            // 3scale
                            env.THREESCALE_SERVER = "https://${env.ACCESS_TOKEN}@${env.THREESCALE_SERVER_BASE_URL}"
                            env.APP_API_NAME = "${APP_BASE_NAME}-api"
                            env.APP_BACKEND_ID = "${APP_BASE_NAME}-backend"
                            env.APP_SYSTEM_NAME = "${APP_BASE_NAME}-2-system"

                        }
                    }
                }
            }
        }

        stage("Import OpenAPI spec") {
            steps {
                script {

                    openshift.withCluster() {
                        openshift.withProject("${env.CICD_NAMESPACE}") {
                            commandLine = "3scale import openapi --insecure --target_system_name=${env.APP_BACKEND_ID} --destination=${env.THREESCALE_SERVER} --backend ${env.APP_OPEN_API_URL}"
                            jobId = newJob(commandLine)

                            timeout(time: 20, unit: 'SECONDS') {
                                node {
                                    pod = waitForPod(jobId)

                                    waitForSuccessfulCompletion(pod)

                                    jobOutput = openshift.raw("logs ${pod}").out
                                    echo "jobOutput = " + groovy.json.JsonOutput.prettyPrint(jobOutput)
                                }
                            }

                            openshift.raw("delete job ${jobId}")
                        }
                    }
                }
            }
        }

        stage("Create a Service") {
            steps {
                script {

                    openshift.withCluster() {
                        openshift.withProject("${env.CICD_NAMESPACE}") {

                            commandLine = "3scale service apply --insecure --name='${env.APP_SERVICE_NAME}' ${env.THREESCALE_SERVER} ${env.APP_SYSTEM_NAME}"
                            echo "commandLine = ${commandLine}"
                            jobId = newJob(commandLine)

                            timeout(time: 20, unit: 'SECONDS') {
                                node {
                                    pod = waitForPod(jobId)

                                    waitForSuccessfulCompletion(pod)

                                    jobOutput = openshift.raw("logs ${pod}").out
                                    echo "jobOutput = ${jobOutput}"
                                }
                            }

                            openshift.raw("delete job ${jobId}")
                        }
                    }
                }
            }
        }

//        stage('Get list of services') {
//            steps {
//                script {
//
//                    openshift.withCluster() {
//                        openshift.withProject("${env.CICD_NAMESPACE}") {
//                            commandLine = "3scale service list --insecure --output=json ${env.THREESCALE_SERVER}"
//                            jobId = newJob(commandLine)
//
//                            timeout(time: 20, unit: 'SECONDS') {
//                                node {
//                                    pod = waitForPod(jobId)
//
//                                    waitForSuccessfulCompletion(pod)
//
//                                    jobOutput = openshift.raw("logs ${pod}").out
//                                    echo "jobOutput = " + groovy.json.JsonOutput.prettyPrint(jobOutput)
//                                }
//                            }
//
//                            openshift.raw("delete job ${jobId}")
//                        }
//                    }
//                }
//            }
//        }

        stage("Create Application Plans") {
            steps {
                script {

                    openshift.withCluster() {
                        openshift.withProject("${env.CICD_NAMESPACE}") {

                            List plans = APPLICATION_PLANS

                            plans.each { plan ->

                                params = ""
                                if (Boolean.TRUE.equals(plan.approvalRequired)) {
                                    params += " --approval-required=true"
                                } else {
                                    params += " --approval-required=false"
                                }
                                if (plan.costPerMonth != null) {
                                    params += " --cost-per-month=${plan.costPerMonth}"
                                }
                                if (Boolean.TRUE.equals(plan.defaultPlan)) {
                                    params += " --default"
                                }
                                if (Boolean.TRUE.equals(plan.disabled)) {
                                    params += " --disabled"
                                }
                                if (Boolean.TRUE.equals(plan.enabled)) {
                                    params += " --enabled"
                                }
                                if (Boolean.TRUE.equals(plan.hide)) {
                                    params += " --hide"
                                }
                                if (plan.name != null) {
                                    params += " --name='${plan.name}'"
                                }
                                if (Boolean.TRUE.equals(plan.publish)) {
                                    params += " --publish"
                                }
                                if (plan.setupFee != null) {
                                    params += " --setup-fee=${plan.setupFee}"
                                }
                                if (plan.trialPeriodDays != null) {
                                    params += " --trial-period-days=${plan.trialPeriodDays}"
                                }

                                commandLine = "3scale application-plan apply --insecure ${params} ${env.THREESCALE_SERVER} ${env.APP_SYSTEM_NAME} ${plan.systemName}"
                                echo "commandLine = ${commandLine}"
                                jobId = newJob(commandLine)

                                timeout(time: 20, unit: 'SECONDS') {
                                    node {
                                        pod = waitForPod(jobId)

                                        waitForSuccessfulCompletion(pod)

                                        jobOutput = openshift.raw("logs ${pod}").out
                                        echo "jobOutput = ${jobOutput}"
                                    }
                                }

                                openshift.raw("delete job ${jobId}")

                            }
                        }
                    }
                }
            }
        }


        stage("Create Applications") {
            steps {
                script {

                    openshift.withCluster() {
                        openshift.withProject("${env.CICD_NAMESPACE}") {

                            List applications = APPLICATIONS

                            applications.each { application ->

                                echo "application = ${application}"
                                echo "application.class = " + application.getClass()

                                application.each { entry ->

                                    echo "${entry.key} :: ${entry.value}"
                                }
                            }
                        }
                    }
                }
            }
        }

    }
}
